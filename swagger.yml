openapi: "3.0.0"
info:
  title: Shopco API
  description: ShopCo is a backend eCommerce platform built using Node.js, Express.js, and MongoDB. It is designed to handle secure product management, user authentication, and smooth transaction processing, offering a scalable solution for online retail businesses.
  version: "1.0.0"

servers:
  - url: "http://127.0.0.1:4010"
    description: Mock server
  - url: "http://shopco.com"
    description: Stage server
tags:
  - name: Authentication
    description: User Authentication operations
  - name: User
    description: All User operations
  - name: Product
    description: All Product operations
  - name: Cart
    description: All Cart operations
  - name: Order
    description: All Order operations
  - name: Payment
    description: All Payment operations
  - name: Category
    description: All Category operations

paths:
  # Authentication
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Logs in a user and returns a JWT token.
      requestBody:
        description: User login credentials.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "user_password"
      responses:
        "200":
          description: User successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access:
                        type: object
                        properties:
                          expires_in:
                            type: string
                            description: JWT expiration time
                            example: 2016-05-18T16:00:00Z
                          token:
                            type: string
                            description: JWT token for authenticated requests
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh:
                        type: object
                        properties:
                          expires_in:
                            type: string
                            description: JWT expiration time
                            example: 2016-05-18T16:00:00Z
                          token:
                            type: string
                            description: JWT token for authenticated requests
                            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /auth/register:
    post:
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: user registration has been succeful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  status:
                    type: integer
                    example: 201
        "422":
          $ref: "#/components/responses/ValidationError"

  # User Entity
  /users:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Returns a list of users.
      description: Returns the list fo users and only available for admin
      responses:
        "200": # status code
          description: A paginated and sorted JSON array of user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  page:
                    $ref: "#/components/schemas/Pagination/properties/page"
                  pageSize:
                    $ref: "#/components/schemas/Pagination/properties/pageSize"
                  totalItems:
                    $ref: "#/components/schemas/Pagination/properties/totalItems"
                  totalPages:
                    $ref: "#/components/schemas/Pagination/properties/totalPages"
                  sortBy:
                    $ref: "#/components/schemas/Sort/properties/sortBy"
                  sortOrder:
                    $ref: "#/components/schemas/Sort/properties/sortOrder"
              examples:
                example1:
                  $ref: "#/components/examples/users"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
    post:
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: new user has been created successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/user"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/{id}:
    get:
      tags:
        - User
      summary: Returns a single user.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a single user with the associated user-id
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/user"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      tags:
        - User
      summary: Updates a user by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Fields for the user to update. At least one field must be provided.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                avatart:
                  type: object
                  properties:
                    url:
                      type: string
              example:
                email: newemail@example.com
                firstName: John
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/user"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - User
      summary: Deletes a user by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Product Entity
  /products:
    get:
      tags:
        - Product
      summary: Returns all a product array
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/SortBy"
        - $ref: "#/components/parameters/SortOrder"
        - name: category
          in: query
          required: false
          description: Name of the product's category.
          schema:
            type: string
        - name: size
          in: query
          required: false
          description: Name of the product's size.
          schema:
            type: string
        - name: color
          in: query
          required: false
          description: Name of the product's color.
          schema:
            type: string
        - name: type
          in: query
          required: false
          description: product's type.
          schema:
            type: string
        - name: priceMin
          in: query
          required: false
          description: minimum price
          schema:
            type: integer
        - name: maxMin
          in: query
          required: false
          description: maximum price
          schema:
            type: integer
      responses:
        "200":
          description: A paginated and sorted JSON array of products
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/products"
    post:
      tags:
        - Product
      summary: Add a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product successfully created
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/product"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /products/{id}:
    get:
      tags:
        - Product
      summary: Returns a single Product.
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A product object
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/product"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Product
      summary: Updates an existing product.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Product object that needs to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: Product updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Product
      summary: Deletes a product.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Product deleted successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  # Reviews Entity
  /reviews:
    get:
      summary: Get all reviews
      tags:
        - Review
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - name: sortBy
          required: false
          in: query
          schema:
            type: string
            enum:
              - latest
              - oldest
              - most-relevant
      responses:
        "200":
          description: Returns all reviews
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/reviews"

    post:
      security:
        - bearerAuth: []
      summary: Create a new review
      tags:
        - Review
      requestBody:
        description: Review data to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "201":
          description: Review created successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/review"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /reviews/{id}:
    get:
      summary: Get a single review by ID
      tags:
        - Review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the review to retrieve
      responses:
        "200":
          description: Returns a single review
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/review"
        "400":
          $ref: "#/components/responses/ValidationError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      security:
        - bearerAuth: []
      summary: Update a review by ID
      tags:
        - Review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the review to update
      requestBody:
        description: Fields to update for the review
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
              example:
                rating: 4
                comment: "Updated review: the product is good, but had a small issue."
      responses:
        "200":
          description: Review updated successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/review"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      security:
        - bearerAuth: []
      summary: Delete a review by ID
      tags:
        - Review
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the review to delete
      responses:
        "204":
          description: Review deleted successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Cart entity
  /cart/add:
    post:
      security:
        - bearerAuth: []
      summary: Add an item to the user's cart
      tags:
        - Cart
      requestBody:
        description: Cart item data to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
            example:
              userId: "sldfksdlfksdlf"
              product:
                _id: "64c8df20f9af5b001bd2a3d1"
                name: "Vertical Striped Shirt"
                description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                srcUrl: "/images/pic5.png"
                price: 20
              quantity: 2
      responses:
        "201":
          description: Item added to cart successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/cartItem"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /cart/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get all cart-items of an user.
      tags:
        - Cart
      parameters:
        - name: id
          description: user's ID
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Returns all user's cart items
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/cartItems"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      security:
        - bearerAuth: []
      summary: Update an item in the user's cart
      tags:
        - Cart
      parameters:
        - name: id
          description: user's ID
          required: true
          in: path
          schema:
            type: string
        - name: itemId
          description: The cartItem ID to update
          required: true
          in: query
          schema:
            type: string
      requestBody:
        description: Cart item data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: user's ID
                quantity:
                  type: integer
                  description: Updated quantity of the product
              example:
                itemId: 64c8df20f9af5b001bd2a3d2
                quantity: 2
      responses:
        "200":
          description: Cart item updated successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/cartItemPatch"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      security:
        - bearerAuth: []
      summary: Remove an item from the user's cart
      tags:
        - Cart
      parameters:
        - name: id
          description: user's ID
          required: true
          in: path
          schema:
            type: string
        - name: itemId
          description: The cartItem ID to update
          required: true
          in: query
          schema:
            type: string
      responses:
        "204":
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  isError:
                    type: boolean
                  data:
                    type: boolean
                    nullable: true
                  message:
                    type: string
                  status:
                    type: integer
                    description: status code fo the resonse
              example:
                isSuccess: true
                isError: false
                data: null
                message: Item removed from cart successfully
                status: 204
                next: "/next-page"
                prev: "/prev-page"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # Order entity
  /orders:
    post:
      summary: Create a new order.
      tags:
        - Order
      security:
        - bearerAuth: []
      requestBody:
        description: Order data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/order"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
    get:
      tags:
        - Order
      summary: Returns all orders
      responses:
        "200":
          description: A list of all orders
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/order"
  /orders/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Order
      summary: Returns a single order by ID
      parameters:
        - name: id
          in: path
          description: order ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single order object
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/order"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Order
      summary: Updates an order status
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      requestBody:
        description: Order status update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "shipped"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/order"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Order
      summary: Deletes an order
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Order deleted successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  # Payment entity
  /payments:
    post:
      security:
        - bearerAuth: []
      tags:
        - Payment
      summary: Creates a new payment
      requestBody:
        description: Payment data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
            example:
              orderId: "64c8df20f9af5b001bd2a3d1"
              userId: "64c8df20f9af5b001bd2a3d2"
              amount: 200
              paymentMethod: "credit_card"
              status: "completed"
      responses:
        "201":
          description: Payment processed successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/payment"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
  /payments/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Payment
      summary: Returns a single payment by ID
      parameters:
        - name: id
          in: path
          description: Payment ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single payment object
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/payment"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  # Category
  /categories:
    post:
      summary: create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Payment processed successfully
          content:
            application/json:
              examples:
                example1:
                  $ref: "#/components/examples/category"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Get all categories
      responses:
        "200":
          $ref: "#/components/examples/categories"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /categories/{id}:
    get:
      summary: Get single category
      parameters:
        - name: id
          required: true
          in: path
          description: category ID
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/examples/categories"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      tags:
        - Category
      summary: Updates an category name
      parameters:
        - name: id
          in: path
          description: category ID
          required: true
          schema:
            type: string
      requestBody:
        description: Category name update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "shipped"
      responses:
        "200":
          $ref: "#/components/examples/category"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Category
      summary: Deletes a Category
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Category deleted successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

components:
  schemas:
    User: # User schema
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        _id:
          type: string
          description: User's unique identification number
        avatar:
          type: object
          properties:
            url:
              type: string
        firstName:
          type: string
          description: user's first name
        lastName:
          type: string
          description: user's last name
        email:
          type: string
          description: user's role
        password:
          type: string
          description: user's password
        role:
          type: string
          description: Role of ther user.
          enum:
            - admin
            - customer
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated.
      example:
        firstName: John
        lastName: Doe
        email: john@gamil.com
        password: test123

    Product: # Product Schema
      type: object
      required:
        - name
        - price
        - stock
        - category
        - sku
      properties:
        _id:
          type: string
          description: Unique identifier for the product.
        name:
          type: string
          description: Name of the product.
        description:
          type: string
          description: Detailed description of the product.
        srcUrl:
          type: string
          description: Main image url of the product.
        price:
          type: number
          format: double
          description: Price of the product.
        sku:
          type: string
          description: Stock Keeping Unit, unique identifier for inventory.
        category:
          $ref: "#/components/schemas/Category"
        images:
          type: array
          items:
            type: string
          description: URLs or paths to product images.
        stock:
          type: integer
          default: 0
          description: Number of items in stock.
        isActive:
          type: boolean
          default: true
          description: Availability status of the product.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the product was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the product was last updated.
      example:
        name: Vertical Striped Shirt
        price: 100
        stock: 50
        category:
          _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
          name: "Fashion"
        sku: SKU-STRIPE-001
        srcUrl: "https://example.com/avatar1.jpg"
        isActive: true

    Address: # Address Schema
      type: object
      required:
        - addressLine1
        - city
        - state
        - postalCode
        - country
        - user
      properties:
        _id:
          type: string
          format: uuid
          description: Unique identifier for the address.
        user:
          $ref: "#/components/schemas/User"
        addressLine1:
          type: string
          description: First line of the address.
        addressLine2:
          type: string
          description: Second line of the address (optional).
        city:
          type: string
          description: City name.
        state:
          type: string
          description: State or province.
        postalCode:
          type: string
          description: Postal or ZIP code.
        country:
          type: string
          description: Country name.
        phone:
          type: string
          description: Contact phone number.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the address was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the address was last updated.-
      example:
        $ref: "#/components/examples/address"

    Category: # Category Schema
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          format: uuid
          description: Unique identifier for the category.
        name:
          type: string
          description: Name of the category.
        description:
          type: string
          description: Description of the category (optional).
        parent:
          $ref: "#/components/schemas/Category"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the category was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the category was last updated.
      example:
        $ref: "#/components/examples/category"

    Order: # Order Schema
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the order
        userId:
          type: string
          description: ID of the user who placed the order
        items:
          type: array
          description: List of items in the order
          items:
            $ref: "#/components/schemas/CartItem"
        status:
          type: string
          enum:
            - pending
            - shipped
            - rejected
          description: Current status of the order
        totalAmount:
          type: number
          description: Total amount for the order
        paymentMethod:
          type: string
          description: Payment method used for the order
        isPaid:
          type: boolean
          description: payment status of the order
        billingAddress:
          description: Billing address of the order
          $ref: "#/components/schemas/Address"
      example:
        userId: "64c8df20f9af5b001bd2a3d2"
        items:
          - userId: "64c8df20f9af5b001bd2a3d1"
            product:
              _id: "64c8df20f9af5b001bd2a3d1"
              name: "Vertical Striped Shirt"
              description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
              srcUrl: "/images/pic5.png"
              price: 232
            quantity: 1
        status: "pending"
        isPaid: false
        totalAmount: 200
        paymentMethod: "credit_card"

    Payment: # Payment Schema
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the payment
        orderId:
          type: string
          description: ID of the order related to the payment
        amount:
          type: number
          description: Payment amount
        paymentMethod:
          type: string
          description: Payment method used
        status:
          type: string
          description: Status of the payment (e.g., success, failed)
      example:
        orderId: "64c8df20f9af5b001bd2a3d1"
        userId: "64c8df20f9af5b001bd2a3d2"
        amount: 200
        paymentMethod: "credit_card"
        status: "completed"
        createdAt: "2024-06-01T10:30:00Z"
        updatedAt: "2024-06-01T11:00:00Z"

    CartItem: # CartItem Schema
      type: object
      required:
        - userId
        - product
        - quantity
      properties:
        _id:
          type: string
          description: ID of the cart-item
        userId:
          type: string
          description: ID of the user
        product:
          type: object
          properties:
            _id:
              type: string
              description: product ID
            name:
              type: string
              description: Name of the product.
            description:
              type: string
              description: Detailed description of the product.
            srcUrl:
              type: string
              description: Main image url of the product.
            price:
              type: number
              format: double
              description: Price of the product.
            sku:
              type: string
              description: Stock Keeping Unit, unique identifier for inventory.
        quantity:
          type: integer
          minimum: 1
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        userId: "64c8df20f9af5b001bd2a3d1"
        product:
          _id: "64c8df20f9af5b001bd2a3d1"
          name: "Vertical Striped Shirt"
          description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
          srcUrl: "/images/pic5.png"
          price: 232
        quantity: 1

    Review: # Review Schema
      type: object
      required:
        - rating
        - comment
        - userId
        - productId
      properties:
        _id:
          type: string
          description: Unique identifier for the review.
        user:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
        productId:
          type: string
        rating:
          type: number
          minimum: 0
          maximum: 5
          description: Rating score given to the product (0 to 5).
        comment:
          type: string
          description: Detailed review or comment on the product.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the review was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the review was last updated.
      example:
        userId: "64c8df20f9af5b001bd2a3d2"
        productId: "64c8df20f9af5b001bd2a3d7"
        rating: 5
        comment: "Fantastic product! Exceeded my expectations."

    # Pagination and Sort schema
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: The current page number
          example: 1
        pageSize:
          type: integer
          description: The number of items per page
          example: 10
        totalItems:
          type: integer
          description: The total number of items available
          example: 100
        totalPages:
          type: integer
          description: The total number of pages available
          example: 10
    Sort:
      type: object
      properties:
        sortBy:
          type: string
          description: The field to sort by
          example: "name"
        sortOrder:
          type: string
          description: The order of sorting (asc or desc)
          enum:
            - asc
            - desc
          example: "asc"

  #Response Schemas
  responses:
    UnauthorizedError:
      description: Access is denied due to missing or invalid access token. Ensure that a valid authentication token is provided.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                example: {}
              isError:
                type: boolean
                example: true
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: "Access denied. Invalid or missing access token."
              status:
                type: integer
                example: 401
    ForbiddenError:
      description: For bidden.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                example: {}
              isError:
                type: boolean
                example: true
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: "You are not allowed to access this page"
              status:
                type: integer
                example: 403
    NotFoundError:
      description: The requested resource could not be found. It may have been removed, or the URL is incorrect.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                example: {}
              isError:
                type: boolean
                example: true
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: "The requested resource was not found."
              status:
                type: integer
                example: 404
    ValidationError:
      description: The input provided failed to meet the required validation criteria. Please check the request data for errors.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                example: {}
              isError:
                type: boolean
                example: true
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: "Validation failed. Please check your input."
              status:
                type: integer
                example: 422
    InternalServerError:
      description: An unexpected server error occurred. This is usually due to internal issues or unforeseen circumstances. Please try again later.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                example: {}
              isError:
                type: boolean
                example: true
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: "An unexpected error occurred. Please try again later."
              status:
                type: integer
                example: 500
    UnprocessableEntityError:
      description: The server understands the request but cannot process it due to semantic errors or failed validation. Ensure that the provided input is correct and complies with the expected format.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                example: {}
              isError:
                type: boolean
                example: true
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: "Unprocessable entity. Check the input format and correctness."
              status:
                type: integer
                example: 422

  # Pagination
  parameters:
    Page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        description: The page number to retrieve
        example: 1
    PageSize:
      name: pageSize
      in: query
      required: false
      schema:
        type: integer
        description: The number of products per page
        example: 10
    SortBy:
      name: sortBy
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/Sort/properties/sortBy"
    SortOrder:
      name: sortOrder
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/Sort/properties/sortOrder"

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer

  examples:
    users:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          - _id: "64b2f9a14e5a5b0012345678"
            avatar:
              url: "https://example.com/avatar1.jpg"
            firstName: "John"
            lastName: "Doe"
            email: "john.doe@example.com"
            password: "$2b$12$e5PfJ0Tb6W9JxvB.fEXAMPLE"
            role: admin
            addresses: []
            createdAt: "2024-01-15T08:30:00Z"
            updatedAt: "2024-02-20T14:00:00Z"

          - _id: "64b2f9a14e5a5b0012345679"
            avatar:
              url: "https://example.com/avatar2.jpg"
            firstName: "Jane"
            lastName: "Smith"
            email: "jane.smith@example.com"
            password: "$2b$12$abcdeXyZ321.WLw8nEXAMPLE"
            role: customer
            addresses: []
            createdAt: "2024-02-10T12:45:00Z"
            updatedAt: "2024-03-15T09:30:00Z"

          - _id: "64b2f9a14e5a5b0012345680"
            avatar:
              url: "https://example.com/avatar3.jpg"
            firstName: "Michael"
            lastName: "Johnson"
            email: "michael.johnson@example.com"
            password: "$2b$12$PQRSTuvw112.yFghzEXAMPLE"
            role: customer
            addresses: []
            createdAt: "2024-03-01T11:20:00Z"
            updatedAt: "2024-03-25T15:00:00Z"

          - _id: "64b2f9a14e5a5b0012345681"
            avatar:
              url: "https://example.com/avatar4.jpg"
            firstName: "Alice"
            lastName: "Brown"
            email: "alice.brown@example.com"
            password: "$2b$12$uvwXY7890.PRSJhgqEXAMPLE"
            role: customer
            addresses: []
            createdAt: "2024-04-05T16:00:00Z"
            updatedAt: "2024-05-10T13:45:00Z"

          - _id: "64b2f9a14e5a5b0012345682"
            avatar:
              url: "https://example.com/avatar5.jpg"
            firstName: "David"
            lastName: "Williams"
            email: "david.williams@example.com"
            password: "$2b$12$XywVJklMNO123.LwHqEXAMPLE"
            role: admin
            addresses: []
            createdAt: "2024-05-12T10:00:00Z"
            updatedAt: "2024-06-20T09:30:00Z"
    user:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "64b2f9a14e5a5b0012345678"
          avatar:
            url: "https://example.com/avatar1.jpg"
          firstName: "John"
          lastName: "Doe"
          email: "john.doe@example.com"
          password: "$2b$12$e5PfJ0Tb6W9JxvB.fEXAMPLE"
          role: admin
          addresses: []
          createdAt: "2024-01-15T08:30:00Z"
          updatedAt: "2024-02-20T14:00:00Z"

    products:
      value:
        isError: false
        isSuccess: true
        prev: null
        next: 2
        status: 200
        message: success message
        data:
          - _id: "64c8df20f9af5b001bd2a3d1"
            name: "Vertical Striped Shirt"
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            srcUrl: "/images/pic5.png"
            images:
              ["/images/pic5.png", "/images/pic10.png", "/images/pic11.png"]
            price: 232
            sku: "SKU-STRIPE-001"
            category:
              _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
              name: "Fashion"
            stock: 50
            isActive: true
            rating: 5
            createdAt: "2024-01-12T12:00:00.000Z"
            updatedAt: "2024-09-01T10:00:00.000Z"
          - _id: "64c8df20f9af5b001bd2a3d2"
            name: "Courage Graphic T-shirt"
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            srcUrl: "/images/pic6.png"
            images:
              ["/images/pic6.png", "/images/pic10.png", "/images/pic11.png"]
            price: 145
            sku: "SKU-COURAGE-002"
            category:
              _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
              name: "Fashion"
            stock: 30
            isActive: true
            rating: 4.5
            createdAt: "2024-02-15T12:30:00.000Z"
            updatedAt: "2024-08-15T09:00:00.000Z"
          - _id: "64c8df20f9af5b001bd2a3d3"
            name: "Loose Fit Bermuda Shorts"
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            srcUrl: "/images/pic7.png"
            images: ["/images/pic7.png"]
            price: 80
            sku: "SKU-BERMUDA-003"
            category:
              _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
              name: "Fashion"
            stock: 20
            isActive: true
            rating: 4.5
            createdAt: "2024-03-10T14:00:00.000Z"
            updatedAt: "2024-08-20T08:30:00.000Z"
          - _id: "64c8df20f9af5b001bd2a3d4"
            name: "Faded Skinny Jeans"
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            srcUrl: "/images/pic8.png"
            images: ["/images/pic8.png"]
            price: 210
            sku: "SKU-SKINNY-004"
            category:
              _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
              name: "Fashion"
            stock: 40
            isActive: true
            rating: 5
            createdAt: "2024-05-12T13:00:00.000Z"
            updatedAt: "2024-09-01T10:30:00.000Z"
        pageSize: 5
        totalPage: 10
        page: 1

    product:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "64c8df20f9af5b001bd2a3d1"
          name: "Vertical Striped Shirt"
          description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
          srcUrl: "/images/pic5.png"
          images: ["/images/pic5.png", "/images/pic10.png", "/images/pic11.png"]
          price: 232
          sku: "SKU-STRIPE-001"
          category:
            _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
            name: "Fashion"
          stock: 50
          isActive: true
          rating: 4.5
          createdAt: "2024-01-12T12:00:00.000Z"
          updatedAt: "2024-09-01T10:00:00.000Z"

    reviews:
      value:
        isError: false
        isSuccess: true
        prev: null
        next: 2
        status: 200
        message: success message
        data:
          - _id: "f7d67aaf-02d1-4b61-bf47-123456789abc"
            user:
              _id: "64b2f9a14e5a5b0012345678"
              avatar:
                url: "https://example.com/avatar1.jpg"
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
            productId: 87c6f7f5-62d4-4b61-8c56-987654321def
            rating: 5
            comment: "Great mouse, very comfortable to use!"
            createdAt: "2024-03-25T12:45:00Z"
            updatedAt: "2024-03-25T12:45:00Z"
          - _id: "c5f32b3e-81e4-47bf-a123-987654321def"
            user:
              _id: "64b2f9a14e5a5b0012345679"
              avatar:
                url: "https://example.com/avatar2.jpg"
              firstName: "Jane"
              lastName: "Smith"
              email: "jane.smith@example.com"
            productId: 87c6f7f5-62d4-4b61-8c56-987654321def
            rating: 4
            comment: "Good sound quality, but the mic could be better."
            createdAt: "2024-04-15T08:30:00Z"
            updatedAt: "2024-04-15T08:30:00Z"
          - _id: "b82b3cde-13f1-45a8-a12d-654321abcdef"
            user:
              _id: "64b2f9a14e5a5b0012345680"
              avatar:
                url: "https://example.com/avatar3.jpg"
              firstName: "Michael"
              lastName: "Johnson"
              email: "michael.johnson@example.com"
            productId: 87c6f7f5-62d4-4b61-8c56-987654321def
            rating: 3
            comment: "Decent sound but shorter battery life than expected."
            createdAt: "2024-04-05T14:00:00Z"
            updatedAt: "2024-04-05T14:00:00Z"
          - _id: "d34f56ab-9c23-4d56-9ab1-abcdef987654"
            user:
              _id: "64b2f9a14e5a5b0012345681"
              avatar:
                url: "https://example.com/avatar4.jpg"
              firstName: "Alice"
              lastName: "Brown"
              email: "alice.brown@example.com"
            productId: 87c6f7f5-62d4-4b61-8c56-987654321def
            rating: 5
            comment: "Excellent smartwatch, very reliable!"
            createdAt: "2024-05-01T09:15:00Z"
            updatedAt: "2024-05-01T09:15:00Z"
        pageSize: 5
        totalPage: 10
        page: 1
        sortBy: latest

    review:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "f7d67aaf-02d1-4b61-bf47-123456789abc"
          user:
            _id: "64b2f9a14e5a5b0012345678"
            avatar:
              url: "https://example.com/avatar1.jpg"
            firstName: "John"
            lastName: "Doe"
            email: "john.doe@example.com"
          productId: 87c6f7f5-62d4-4b61-8c56-987654321def
          rating: 5
          comment: "Great mouse, very comfortable to use!"
          createdAt: "2024-03-25T12:45:00Z"
          updatedAt: "2024-03-25T12:45:00Z"

    categories:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          - _id: "bfc3d3c29876abcd1234"
            name: "T-shirt"
            description: "name of the category"
            parent: null
            createdAt: "2024-03-15T10:00:00Z"
            updatedAt: "2024-03-20T15:00:00Z"
          - _id: "bfc3d3c29876abcd1235"
            name: "Shirts"
            description: "name of the category"
            parent: null
            createdAt: "2024-03-15T10:00:00Z"
            updatedAt: "2024-03-20T15:00:00Z"
          - _id: "bfc3d3c29876abcd1236"
            name: "Shorts"
            description: "name of the category"
            parent: null
            createdAt: "2024-03-15T10:00:00Z"
            updatedAt: "2024-03-20T15:00:00Z"
          - _id: "bfc3d3c29876abcd1237"
            name: "Jeans"
            description: "name of the category"
            parent: null
            createdAt: "2024-03-15T10:00:00Z"
            updatedAt: "2024-03-20T15:00:00Z"
    category:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "bfc3d3c29876abcd1237"
          name: "Jeans"
          description: "name of the category"
          parent: null
          createdAt: "2024-03-15T10:00:00Z"
          updatedAt: "2024-03-20T15:00:00Z"

    orders:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          - _id: "64c8df20f9af5b001bd2a3d1"
            userId: "64c8df20f9af5b001bd2a3d2"
            items:
              - _id: "1a2b3c4d-5e6f-7g8h-9i0j-klmnopqrstuv"
                userId: "64c8df20f9af5b001bd2a3d1"
                product:
                  _id: "9f8d1a5d-3b3c-4b8f-b456-abcdef123456"
                  name: "Wireless Headphones"
                  srcUrl: "/images/pic5.png"
                  price: 99.99
                  description: "Noise-cancelling over-ear headphones with 30 hours of battery life."
                quantity: 2
                isPaid: false
              - _id: "1a2b3c4d-5e6f-7g8h-9i0j-klmnopqrstuv"
                userId: "64c8df20f9af5b001bd2a3d1"
                product:
                  _id: "9f8d1a5d-3b3c-4b8f-b456-abcdef123457"
                  name: "Wireless Headphones"
                  srcUrl: "/images/pic5.png"
                  price: 99.99
                  description: "Noise-cancelling over-ear headphones with 30 hours of battery life."
                quantity: 2
                isPaid: false
            status: "pending"
            totalAmount: 200
            paymentMethod: "credit_card"
    order:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "64c8df20f9af5b001bd2a3d1"
          userId: "64c8df20f9af5b001bd2a3d2"
          items:
            - _id: "1a2b3c4d-5e6f-7g8h-9i0j-klmnopqrstuv"
              userId: "64c8df20f9af5b001bd2a3d1"
              product:
                _id: "9f8d1a5d-3b3c-4b8f-b456-abcdef123456"
                name: "Wireless Headphones"
                srcUrl: "/images/pic5.png"
                price: 99.99
                description: "Noise-cancelling over-ear headphones with 30 hours of battery life."
              quantity: 2
          status: "pending"
          totalAmount: 200
          paymentMethod: "credit_card"

    payments:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          - _id: "p8f9b5d2-4e65-9876-4e56-654321abcdef"
            orderId: "64c8df20f9af5b001bd2a3d1"
            userId: "64c8df20f9af5b001bd2a3d2"
            amount: 200
            paymentMethod: "credit_card"
            status: "completed"
            createdAt: "2024-06-01T10:30:00Z"
            updatedAt: "2024-06-01T11:00:00Z"

          - _id: "p9e8c5b1-9b23-4c78-9876-abcdef654321"
            orderId: "65d8af30e9cf6b002cd4b3e2"
            userId: "65d8af30e9cf6b002cd4b3e3"
            amount: 299.99
            paymentMethod: "paypal"
            status: "completed"
            createdAt: "2024-06-10T12:00:00Z"
            updatedAt: "2024-06-10T12:30:00Z"

          - _id: "p10d9c5f-7c65-4e78-9876-abcdef432109"
            orderId: "66e9cf40f1df7c003de5b4e3"
            userId: "66e9cf40f1df7c003de5b4e4"
            amount: 75
            paymentMethod: "bank_transfer"
            status: "failed"
            createdAt: "2024-07-05T14:00:00Z"
            updatedAt: "2024-07-05T14:15:00Z"

          - _id: "p11e0d6a-6b65-4f87-9876-abcdef321098"
            orderId: "67f1de50f2ef8d004ef6b5e4"
            userId: "67f1de50f2ef8d004ef6b5e5"
            amount: 50
            paymentMethod: "debit_card"
            status: "pending"
            createdAt: "2024-07-15T09:30:00Z"
            updatedAt: "2024-07-15T09:45:00Z"

          - _id: "p12f1e7b-4c56-4d89-9876-abcdef210987"
            orderId: "68g2ef60f3gf9e005gf7c6f5"
            userId: "68g2ef60f3gf9e005gf7c6f6"
            amount: 600
            paymentMethod: "apple_pay"
            status: "completed"
            createdAt: "2024-08-05T11:15:00Z"
            updatedAt: "2024-08-05T11:30:00Z"
    payment:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "p8f9b5d2-4e65-9876-4e56-654321abcdef"
          orderId: "64c8df20f9af5b001bd2a3d1"
          userId: "64c8df20f9af5b001bd2a3d2"
          amount: 200
          paymentMethod: "credit_card"
          status: "completed"
          createdAt: "2024-06-01T10:30:00Z"
          updatedAt: "2024-06-01T11:00:00Z"

    addresses:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          - _id: "9f8d1a5d-3b3c-4b8f-b456-abcdef123456"
            user:
              _id: "64c8df20f9af5b001bd2a3d2"
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
            addressLine1: "123 Main St"
            addressLine2: "Apt 4B"
            city: "New York"
            state: "NY"
            postalCode: "10001"
            country: "USA"
            phone: "+1-555-1234"
            createdAt: "2024-03-01T10:00:00Z"
            updatedAt: "2024-03-05T14:30:00Z"
          - _id: "a5d3e7b9-8b2f-4b12-b987-654321abcdef"
            user:
              _id: "64c8df20f9af5b001bd2a3d3"
              firstName: "Jane"
              lastName: "Smith"
              email: "jane.smith@example.com"
            addressLine1: "456 Elm St"
            addressLine2: null
            city: "San Francisco"
            state: "CA"
            postalCode: "94103"
            country: "USA"
            phone: "+1-555-5678"
            createdAt: "2024-04-10T09:15:00Z"
            updatedAt: "2024-04-12T11:00:00Z"
          - _id: "b4c9a2e6-5a5b-4a2e-b654-1234567890ab"
            user:
              _id: "64c8df20f9af5b001bd2a3d4"
              firstName: "Michael"
              lastName: "Brown"
              email: "michael.brown@example.com"
            addressLine1: "789 Pine St"
            addressLine2: null
            city: "Chicago"
            state: "IL"
            postalCode: "60601"
            country: "USA"
            phone: "+1-555-7890"
            createdAt: "2024-05-22T13:45:00Z"
            updatedAt: "2024-05-25T10:30:00Z"
          - _id: "c6f7d3a1-7d5e-4a4f-b789-abcdef987654"
            user:
              _id: "64c8df20f9af5b001bd2a3d5"
              firstName: "Emily"
              lastName: "Davis"
              email: "emily.davis@example.com"
            addressLine1: "321 Oak St"
            addressLine2: null
            city: "Los Angeles"
            state: "CA"
            postalCode: "90001"
            country: "USA"
            phone: "+1-555-3456"
            createdAt: "2024-06-10T08:30:00Z"
            updatedAt: "2024-06-15T12:00:00Z"
          - _id: "d7a1b2c3-6e7f-4d9b-a987-54321fedcba0"
    address:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "9f8d1a5d-3b3c-4b8f-b456-abcdef123456"
          user:
            _id: "64c8df20f9af5b001bd2a3d2"
            firstName: "John"
            lastName: "Doe"
            email: "john.doe@example.com"
          addressLine1: "123 Main St"
          addressLine2: "Apt 4B"
          city: "New York"
          state: "NY"
          postalCode: "10001"
          country: "USA"
          phone: "+1-555-1234"
          createdAt: "2024-03-01T10:00:00Z"
          updatedAt: "2024-03-05T14:30:00Z"

    cartItems:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          - _id: "1a2b3c4d-5e6f-7g8h-9i0j-klmnopqrstuv"
            userId: "64c8df20f9af5b001bd2a3d1"
            product:
              _id: "9f8d1a5d-3b3c-4b8f-b456-abcdef123456"
              name: "Wireless Headphones"
              srcUrl: "/images/pic5.png"
              price: 99.99
              description: "Noise-cancelling over-ear headphones with 30 hours of battery life."
            quantity: 2
            createdAt: "2024-09-15T10:00:00Z"
            updatedAt: "2024-09-16T12:30:00Z"

          - _id: "2b3c4d5e-6f7g-8h9i-0j1k-lmnopqrstuvw"
            userId: "64c8df20f9af5b001bd2a3d2"
            product:
              _id: "b4c9a2e6-5a5b-4a2e-b654-1234567890ab"
              name: "Smartwatch"
              price: 199.99
              srcUrl: "/images/pic5.png"
              description: "Fitness tracking smartwatch with heart rate monitor and GPS."
            quantity: 1
            createdAt: "2024-09-18T08:15:00Z"
            updatedAt: "2024-09-19T09:45:00Z"

          - _id: "3c4d5e6f-7g8h-9i0j-1k2l-mnopqrstuvwx"
            userId: "64c8df20f9af5b001bd2a3d3"
            product:
              _id: "c6f7d3a1-7d5e-4a4f-b789-abcdef987654"
              name: "Gaming Laptop"
              price: 1299.99
              srcUrl: "/images/pic5.png"
              description: "High-performance gaming laptop with NVIDIA graphics and 16GB RAM."
            quantity: 1
            createdAt: "2024-09-20T11:30:00Z"
            updatedAt: "2024-09-21T13:00:00Z"

          - _id: "4d5e6f7g-8h9i-0j1k-2l3m-opqrstuvwxy"
            userId: "64c8df20f9af5b001bd2a3d4"
            product:
              _id: "d7a1b2c3-6e7f-4d9b-a987-54321fedcba0"
              name: "Bluetooth Speaker"
              price: 49.99
              srcUrl: "/images/pic5.png"
              description: "Portable Bluetooth speaker with 10 hours of playback time."
            quantity: 3
            createdAt: "2024-09-25T14:00:00Z"
            updatedAt: "2024-09-26T16:30:00Z"

          - _id: "5e6f7g8h-9i0j-1k2l-3m4n-pqrstuvwxyz"
            userId: "64c8df20f9af5b001bd2a3d5"
            product:
              _id: "e8d9f2g3-h4i5-6j7k-8l9m-abcdef123456"
              name: "Wireless Charger"
              price: 29.99
              srcUrl: "/images/pic5.png"
              description: "Fast wireless charger compatible with Qi-enabled devices."
            quantity: 2
            createdAt: "2024-09-28T09:45:00Z"
            updatedAt: "2024-09-29T11:00:00Z"
    cartItemsDelete:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          - _id: "2b3c4d5e-6f7g-8h9i-0j1k-lmnopqrstuvw"
            userId: "64c8df20f9af5b001bd2a3d2"
            product:
              _id: "b4c9a2e6-5a5b-4a2e-b654-1234567890ab"
              name: "Smartwatch"
              price: 199.99
              srcUrl: "/images/pic5.png"
              description: "Fitness tracking smartwatch with heart rate monitor and GPS."
            quantity: 1
            createdAt: "2024-09-18T08:15:00Z"
            updatedAt: "2024-09-19T09:45:00Z"

          - _id: "3c4d5e6f-7g8h-9i0j-1k2l-mnopqrstuvwx"
            userId: "64c8df20f9af5b001bd2a3d3"
            product:
              _id: "c6f7d3a1-7d5e-4a4f-b789-abcdef987654"
              name: "Gaming Laptop"
              price: 1299.99
              srcUrl: "/images/pic5.png"
              description: "High-performance gaming laptop with NVIDIA graphics and 16GB RAM."
            quantity: 1
            createdAt: "2024-09-20T11:30:00Z"
            updatedAt: "2024-09-21T13:00:00Z"

          - _id: "4d5e6f7g-8h9i-0j1k-2l3m-opqrstuvwxy"
            userId: "64c8df20f9af5b001bd2a3d4"
            product:
              _id: "d7a1b2c3-6e7f-4d9b-a987-54321fedcba0"
              name: "Bluetooth Speaker"
              price: 49.99
              srcUrl: "/images/pic5.png"
              description: "Portable Bluetooth speaker with 10 hours of playback time."
            quantity: 3
            createdAt: "2024-09-25T14:00:00Z"
            updatedAt: "2024-09-26T16:30:00Z"

          - _id: "5e6f7g8h-9i0j-1k2l-3m4n-pqrstuvwxyz"
            userId: "64c8df20f9af5b001bd2a3d5"
            product:
              _id: "e8d9f2g3-h4i5-6j7k-8l9m-abcdef123456"
              name: "Wireless Charger"
              price: 29.99
              srcUrl: "/images/pic5.png"
              description: "Fast wireless charger compatible with Qi-enabled devices."
            quantity: 2
            createdAt: "2024-09-28T09:45:00Z"
            updatedAt: "2024-09-29T11:00:00Z"
    cartItem:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "1a2b3c4d-5e6f-7g8h-9i0j-klmnopqrstuv"
          userId: "64c8df20f9af5b001bd2a3d1"
          product:
            _id: "64c8df20f9af5b001bd2a3d1"
            name: "Vertical Striped Shirt"
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            srcUrl: "/images/pic5.png"
            images:
              ["/images/pic5.png", "/images/pic10.png", "/images/pic11.png"]
            price: 232
            sku: "SKU-STRIPE-001"
            category:
              _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
              name: "Fashion"
            stock: 50
            isActive: true
            createdAt: "2024-01-12T12:00:00.000Z"
            updatedAt: "2024-09-01T10:00:00.000Z"
          quantity: 1
          createdAt: "2024-09-15T10:00:00Z"
          updatedAt: "2024-09-16T12:30:00Z"
    cartItemPatch:
      value:
        isError: false
        isSuccess: true
        next: "/next-page"
        prev: "/prev-page"
        status: 200
        message: success message
        data:
          _id: "1a2b3c4d-5e6f-7g8h-9i0j-klmnopqrstuv"
          userId: "64c8df20f9af5b001bd2a3d1"
          product:
            _id: "64c8df20f9af5b001bd2a3d1"
            name: "Vertical Striped Shirt"
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            srcUrl: "/images/pic5.png"
            images:
              ["/images/pic5.png", "/images/pic10.png", "/images/pic11.png"]
            price: 232
            sku: "SKU-STRIPE-001"
            category:
              _id: "bfc3d3c2-5f69-41c9-bc36-9876abcd1234"
              name: "Fashion"
            stock: 50
            isActive: true
            createdAt: "2024-01-12T12:00:00.000Z"
            updatedAt: "2024-09-01T10:00:00.000Z"
          quantity: 2
          createdAt: "2024-09-15T10:00:00Z"
          updatedAt: "2024-09-16T12:30:00Z"
